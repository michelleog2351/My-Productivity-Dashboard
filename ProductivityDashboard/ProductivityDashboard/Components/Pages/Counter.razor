@page "/counter"
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<h1><strong>Dashboard</strong></h1>
<h3 style="color: grey;">Today, @CurrentDateTime</h3>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {
    private int currentCount = 0;
    private string CurrentDateTime => DateTime.Now.ToString("MMMM dd yyyy, hh:mm:ss tt");

    private void IncrementCount()
    {
        currentCount++;
    }

    // Create Task Model
    public class TaskItem
    {
        public int Id { get; set; }
        public string Title? { get; set; }
        public string Description { get; set; }
        public string Description { get; set; }
        public bool IsCompleted { get; set; } = false;
        public DateTime CreatedDate { get; set; } = DateTime.Now;
        public DateTime? CompletedDate { get; set; }
    }

    public class TaskService
    {
        private List<TaskItem> tasks = new();
        private int nextId = 1;

        public List<TaskItem> GetTasks() => tasks;

        public void AddTask(string title, string description)
        {
            tasks.Add(new TaskItem { Id = nextId++, Title = title, Description = description });
        }

        public void EditTask(int id, string title, string description)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            { 
                task.Title = title;
                task.Description = description;
            }
        }

        public void DeleteTask(int id)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            {
                tasks.Remove(task);
            }
        }

        public void MarkTaskCompleted(int id)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            {
                task.IsCompleted = true;
                task.CompletedDate = DateTime.Now;
            }
        }

        public int GetCompletedTaskCount() => tasks.Count(t => t.IsCompleted);

    }
}
