@page "/counter"
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

@inject IJSRuntime JS
@inject IJSRuntime JSRuntime

<style>
    .welcome-to-dashboard {
        background-color: #282c34;
        color: white;
        /* padding: 40px; */
        margin-bottom: 20px;
        text-align: center;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh; /* Center content vertically and horizontally */
        text-align: center; /* Center the text */
    }

    .name-input {
        margin-top: 10px;
        margin-bottom: 20px;
        width: 300px; /* Adjust width as needed */
        padding: 10px 0px 10px 0px;
        font-size: 20px;
        text-align: center; /* Center the text within the input */
    }

    .submit-name-btn {
        display: inline-flex; /* Use inline-flex for better control of button size and position */
        align-items: center;
        justify-content: center;
        transition: transform 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease;
        border-radius: 50%;
        height: 60px;
        width: 60px;
        margin-top: 10px; /* Ensure some spacing from the input */
        text-align: center;
        line-height: 1; /* Vertically center text inside the button */
        border: 2px solid #3a9d23; /* Match border to initial background */
    }

        .submit-name-btn:hover {
            background-color: #3a9d23; /* A more vivid green */
            color: white;
            transform: scale(1.1);
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
        }
    
    .back-to-top {
        position: fixed;
        bottom: 20px;
        right: 20px;
        z-index: 1000;
        background-color: #28a745; /* Green background */
        color: white; /* White text color */
        padding: 0;
        border-radius: 50%; /* Circular button */
        width: 60px; /* Smaller width */
        height: 60px; /* Smaller height to match width */
        font-size: 24px; /* Adjust font size for the caret symbol */
        font-weight: bold;
        text-align: center; /* Horizontally center the plus sign */
        line-height: 60px; /* Vertically center the caret symbol */
        cursor: pointer;
        transition: background-color 0.3s ease, transform 0.3s ease; /* Smooth transition for hover effects */
    }

    .back-to-top:hover {
        background-color: #218838; /* Darker green on hover */
        transform: scale(1.1); /* Slightly increase the size on hover */
        box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2); /* Add a shadow effect */
        border-radius: 5px; /* Square the corners when hovered */
    }

    .progress-timer-container {
        display: flex;
        justify-content: space-between; /* Adjusts spacing between the two sections */
        align-items: flex-start; /* Aligns items at the top */
        gap: 20px; /* Adds space between the two sections */
    }

    .circular-progress-wrapper, .timer-container {
        flex: 1;
        max-width: 50%; /* Ensure they take equal space */
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        text-align: center;
    }

    .circular-progress {
        width: 220px;
        height: 220px;
        border-radius: 50%;
        background: conic-gradient( #4caf50 @progressPercentage%, #e0e0e0 @progressPercentage% 100% );
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        margin: 20px auto;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3); /* Slight offset, darker shadow */
        transition: background 3s ease-in-out;
    }

        .circular-progress::before {
            content: '';
            width: 140px;
            height: 140px;
            background-color: #fff; /* Match this with the page background color */
            border-radius: 50%;
            position: absolute;
            z-index: 1;
        }

    .progress-percent {
        z-index: 2;
        font-family: Tahoma;
        font-size: 20px;
        font-weight: bold;
        color: #000;
    }

    .progress-text {
        margin-top: 10px;
        margin-bottom: 10px;
        font-size: 20px;
        /* font-weight: bold; */
        color: #4caf50;
        font-family: 'Segoe UI';
    }

    .add-view-tasks-btn{
        transition: transform 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition for the effects */
        border-radius: 5px;
        margin-bottom: 15px;
    }
    
        .add-view-tasks-btn:hover {
            background-color: #0056b3; /* Darker blue on hover */
            transform: scale(1.1); /* Slightly increase the size */
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2); /* Add a shadow effect */
        }

    
    /* Style for the circular timer */
    .timer-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        /* text-align: center; */
        margin-bottom: 30px;
    }

    .timer-label {
        margin-top: 15px;
        border-radius: 30px;
        padding: 10px 15px;
        width: 250px; /* Adjust width as needed */
    }


    .circular-timer {
        width: 220px;
        height: 220px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        /* background-color: #fff; */
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3);
        margin-bottom: 5px;
    }

        .circular-timer:before {
            content: '';
            width: 200px;
            height: 200px;
            background-color: #fff; /* Match this with the page background color */
            border-radius: 50%;
            position: absolute;
            z-index: 1;
        }

    /* Center buttons in the timer container */
    .button-group {
        display: flex;
        justify-content: space-between;
        gap: 100px;
        margin-top: 0; /* Remove extra space on top */
    }

        .button-group button {
            border-radius: 50%;
            height: 80px;
            width: 80px;
            padding: 10px;
        }

    .timer-text {
        font-size: 40px;
        position: absolute;
        z-index: 2;
    }

    .celebration-message {
        font-size: 16px;
        z-index: 3; /* Higher than the circular timer */
        position: absolute; /* To position it on top of the circle */
        top: 70%; /* Adjust the top value as needed */
        left: 50%;
        transform: translate(-50%, -50%); /* Center the text */
    }

</style>
@if(!hasEnteredName && !isLoading)
{
    <div class="welcome-to-dashboard">
        <h1 style=" font-family: 'Lucida Handwriting'">Welcome to My Productivity Dashboard!</h1>
            <input type="text" class="form-control name-input" style="border-radius: 30px;" @bind="userName" placeholder="Enter your name here!" name="user-name" autocomplete="on" />
            <button class="btn btn-success submit-name-btn" @onclick="SubmitName"><strong>Go!</strong></button>

        <!-- After the Go button -->
        <!-- Border Spinner -->
      @*   @if (isLoading)
        {
            <div class="spinner-border" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        } *@

            <div class="notification" style="color:red; margin-top: 15px; display:@(nameAlert ? "block" : "none");">
                    <strong>Note:</strong> Please enter your name to proceed!
            </div>
    </div>
}

else{
    <!-- Time at the top, smaller and aligned to the right -->
    <div style="text-align: right; color: grey; font-size: 16px;">
        Today, @CurrentDateTime
        @if (result.HasValue)
        {
            <p class="mt-3" 
               style="font-size: 40px; 
                      font-family: Verdana;
                      font-weight: bold;"
               title="Please enter a temperature below">@result.Value@resultUnit</p>
        }

        <div style="text-align: left;">
            <h1 style="color: black; font-size: 36px; margin-bottom: 5px;"><strong>Good morning, @userName! </strong></h1>
            <h2 style="font-size: 24px; margin-bottom: 10px;">My Productivity Dashboard</h2>
    </div>

        <div class="container mt-4">
            <div class="d-flex justify-content-end">
                <div class="form-group mb-0 d-flex align-items-center">
                    <div class="me-2 col-md-4">
                        <input type="number" class="form-control form-control-sm" value="0" id="tempInput" @oninput="(e) => UpdateTemperature(e)" placeholder="Temperature" />
                    </div>
                    <div class="col-md-8">
                        <select class="form-control form-control-sm" id="conversionType" @onchange="(e) => UpdateConversionType(e)">
                            <option value="CtoF">Celsius to Fahrenheit</option>
                            <option value="FtoC">Fahrenheit to Celsius</option>
                        </select>
                    </div>
                </div>
            </div>
        </div>

    </div>

   @*  <!-- Main heading -->
    <h1 style="font-size: 36px; margin-bottom: 5px;"><strong>My Productivity Dashboard</strong></h1>

    <!-- Greeting with the user's name -->
    <h2 style="font-size: 24px; margin-bottom: 30px;">Good morning, @userName! What's the plan today?</h2>  *@

    <hr style="border: 1px solid #ccc; margin-bottom: 20px;">


    <!-- Add Back To Top Button -->
    <button class="btn btn-success back-to-top" @onclick="BackToTop">^</button>

    <!-- Task progress section -->
    <div class="progress-timer-container">
        <div class="circular-progress-wrapper">
            <!-- Sub-heading for task progress, slightly smaller than the greeting -->
            <h3 style="font-size: 22px; margin-bottom: 5px;"><strong>My Task Progress</strong></h3>

            <div class="circular-progress" role="progressbar"
                 aria-label="Total task progress"
                 aria-valuemin="0"
                 aria-valuemax="100"
                 title="@GetProgressText()">

                <span class="progress-percent">@GetProgressPercentage().ToString("0")%</span>
            </div>
            <span class="progress-text">@GetProgressText()</span>

            <!-- Button to reveal tasks section -->
            <button class="btn btn-primary add-view-tasks-btn" type="button" @onclick="ShowTaskSection"><strong>Add & View My Tasks</strong></button>
        </div>

        <div class="timer-container">
            <!-- Timer Label Input -->
            <input type="text" class="form-control form-control-sm bg-light timer-label m-2"
                   style=""
                   @bind="timerLabel"
                   placeholder="Name for @userName's timer..." 
                   name="timer-label"
                   autocomplete="on" />
            <div class="form-group mb-2 d-flex flex-column align-items-center">
                <div class="d-flex align-items-center">
                    @* Hours Input *@
                    <input type="number" class="form-control form-control-sm me-2"
                           style="width: 70px;"
                           value="@formattedHours"
                           @oninput="OnHoursChange"
                           placeholder="Hrs" />

                    <div class="d-flex align-items-center">
                        <h4><strong>:</strong></h4>
                    </div>
                    @* Minutes Input *@
                    <input type="number" class="form-control form-control-sm mx-2"
                           style="width: 70px;"
                           value="@formattedMinutes"
                           @oninput="OnMinsChange"
                           placeholder="Mins" />

                    <div class="d-flex align-items-center">
                        <h4><strong>:</strong></h4>
                    </div>
                    @* Seconds Input *@
                    <input type="number" class="form-control form-control-sm ms-2"
                           style="width: 70px;"
                           value="@formattedSeconds"
                           @oninput="OnSecsChange"
                           placeholder="Secs" />
                </div>
                <button class="btn btn-primary m-2 w-100" @onclick="Confirm">Confirm</button>
            </div>

            <div class="circular-timer" style="background: @GetProgressGradient();">

                <span class="timer-text">@FormatDisplayTime(remainingTime)</span>
                @if (remainingTime == 0)
                {
                    <p class="celebration-message text-success mt-2">
                        @(!string.IsNullOrEmpty(timerLabel) ? timerLabel : "Time's up! Great job!") 🎉
                    </p>
                }
            </div>

            <div class="button-group mt-2 d-flex justify-content-end">
                <button class="btn btn-danger"
                        style="border-radius: 50%; height: 80px; width: 80px;"
                        @onclick="ResetTimer">
                    Reset
                </button>

                <button class="btn @(isPaused ? "btn-warning" : "btn-success")"
                        style="border-radius: 50%; height: 80px; width: 80px; color: white;"
                        @onclick="StartPauseTimer"
                        disabled="@IsTimeValid"
                        title="@(IsTimeValid ? "Add an appropriate time to start the timer!" : null)">
                    @(isPaused ? "Pause" : "Start")
                </button>                
            </div>
        </div>
    </div>

    @if (isTaskSectionVisible)
    {
        <div class="tasks-section">
            <div class="set-task-goal mb-5">
                <label for="taskGoal"><strong>So, how many tasks do you aim to complete today?</strong></label>
                <input type="number" class="form-control" id="taskGoal" @bind="taskGoal" min="1" />
            </div>

            <div class="add-task mb-5">
                <h5>Add New Task</h5>
                <form class="form-inline">
                    <div class="form-group mr-2">
                        <input type="text" class="form-control mb-2" placeholder="Title*" @bind="newTaskTitle" name="add-task" autocomplete="on" />
                    </div>

                    <div class="form-group">
                        <textarea class="form-control mb-2" placeholder="Description (Feel free to include due dates, priorities or other info for this task)" @bind="newTaskDescription" name="task-desc" autocomplete="on" />
                    </div>
                </form>

                <div class="notification" style="color:red; margin-bottom: 15px; display:@(tasksLimitAlert ? "block" : "none")">
                    <strong>Note: YO!</strong> You have reached your tasks goal! Increase your no.tasks goals if you wish to add more tasks.
                </div>

                <button class="btn btn-outline-primary" disabled="@IsAddTaskButtonDisabled" @onclick="AddTask">Add Task</button>
            </div>

            <div class="accordion" id="taskAccordion">
                <h5>My Task List</h5>
                @foreach (var task in tasksBusiness.GetTasks())
                {
                    <div class="accordion-item">
                        <h2 class="accordion-header" id="heading@task.Id">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#collapse@task.Id" aria-expanded="false" aria-controls="collapse@task.Id">
                                <input type="checkbox" @onchange="() => MarkTaskCompleted(task.Id)" /> @task.Title
                                @if (task.IsCompleted && task.CompletedDate != null)
                                {
                                    <span>(Completed on @task.CompletedDate?.ToString("MMMM dd yyyy hh:mm:ss"))</span>
                                }
                            </button>
                        </h2>
                        <div id="collapse@task.Id" class="accordion-collapse collapse show" aria-labelledby="heading@task.Id" data-bs-parent="#taskAccordion">
                            <div class="accordion-body">
                                @if (task.Id == editTaskId)
                                {
                                    <!-- Edit Mode -->
                                    <form class="form-inline">
                                        <div class="form-group mr-2">
                                            <input type="text" class="form-control" placeholder="Edit Title" @bind="editTaskTitle" name="edit-title" autocomplete="on" />
                                        </div>
                                        <div class="form-group">
                                            <textarea class="form-control" placeholder="Edit Description" @bind="editTaskDescription" name="edit-desc" autocomplete="on" />
                                        </div>
                                        <button type="button" class="btn btn-success" @onclick="SaveTaskEdit">Save</button>
                                        <button type="button" class="btn btn-danger" @onclick="CancelEdit">Cancel</button>
                                    </form>
                                }
                                else
                                {
                                    <!-- Regular View Mode -->
                                    <p>@task.Description</p>
                                    <button type="button" class="btn btn-primary" @onclick="() => StartEditTask(task.Id, task.Title, task.Description)">Edit</button>
                                    <button type="button" class="btn btn-danger" @onclick="() => DeleteTask(task.Id)">Delete</button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    }
    <div class="footer shadow-sm bg-light p-3 m-1">
        <footer style="margin-top: 20px;"></footer>
    </div>
}
@code {
    private bool hasEnteredName = false; // Set to track if the user has entered in their name
    private string userName = "";
    private bool nameAlert = false;
    private bool isLoading = false;

    private bool isTaskSectionVisible = false; // State to control the visibility of the task section
    private double temperature;
    private double? result;
    private string conversionType = "CtoF"; // Default selection
    private string? resultUnit; 
    private string CurrentDateTime => DateTime.Now.ToString("MMMM dd yyyy, hh:mm:ss tt");

    private TasksBusiness tasksBusiness = new(); // Create a new instance
    private int taskGoal = 1;  // Variable to store the user's goal (default value)
    private string progressText => GetProgressText();
    private double progressPercentage => GetProgressPercentage();

    private int completedTasks => tasksBusiness.GetCompletedTaskCount(); // Get the completed tasks count
    private string newTaskTitle = string.Empty;
    private string newTaskDescription = string.Empty;
    private bool IsAddTaskButtonDisabled => string.IsNullOrWhiteSpace(newTaskTitle);
    private bool tasksLimitAlert = false;

    // Edit Task variables
    private int editTaskId = -1; // used to track which task is being eidted
    private string editTaskTitle = string.Empty;
    private string editTaskDescription = string.Empty;

    // Timer Variables
    private string timerLabel = ""; 
    private int hours = 0;
    private int minutes = 0;
    private int seconds = 0;
    private int totalTime; // Total time in seconds
    private int remainingTime;

    // Formatted strings for input display
    private string formattedHours => hours.ToString("D2");
    private string formattedMinutes => minutes.ToString("D2");
    private string formattedSeconds => seconds.ToString("D2");
    private double progress;
    private System.Timers.Timer? countdownTimer;
    private bool isPaused = false;

    // Determine if the Start Timer button should be disabled
    private bool IsTimeValid => hours == 0 && minutes == 0 && seconds == 0;

    // private string modalHours = "00";
    // private string modalMinutes = "00";
    // private string modalSeconds = "00";
    // private string remainingTime => $"{hours}:{minutes}:{seconds}";

    private void SubmitName()
    {
        if (!string.IsNullOrWhiteSpace(userName))
        {
            // isLoading = true; // Show text
            hasEnteredName = true; // Set to true to reveal the dashboard                          
            nameAlert = false; // Hide the alert since a valid name has been entered
        }
        else
        {
            nameAlert = true; // Show alert if name is not entered
        }
        StateHasChanged();
    }

    protected override void OnInitialized()
    {
        var timer = new System.Timers.Timer(1000); // Set the timer to update every 1 second
        timer.Elapsed += UpdateTime; // This will pass both sender and ElapsedEventArgs to the method
        timer.Start();

        result = 0;  // Set an initial temperature value
        resultUnit = "°C";  // Set the default unit
    }

    private void UpdateTime(object? sender, System.Timers.ElapsedEventArgs e) => InvokeAsync(StateHasChanged);

    private void UpdateTemperature(ChangeEventArgs e)
    {
        if (decimal.TryParse(e.Value?.ToString(), out var temp))
        {
            temperature = (double)temp;
            ConvertTemperature();
        }
    }

    private void UpdateConversionType(ChangeEventArgs e)
    {
        conversionType = e.Value?.ToString() ?? "CtoF";
        ConvertTemperature();
    }

    private void ConvertTemperature()
    {
        if (conversionType == "CtoF")
        {
            result = Math.Round((temperature * 9 / 5) + 32, 1);
            resultUnit = "°F";
        }
        else if (conversionType == "FtoC")
        {
            result = Math.Round((temperature - 32) * 5 / 9, 1);
            resultUnit = "°C";
        }
    }

    private void AddTask()
    {
        if (tasksBusiness.GetTasks().Count >= taskGoal)
        {
            // Show notification when trying to add more tasks than the goal
            tasksLimitAlert = true;
        }
        else if (!string.IsNullOrWhiteSpace(newTaskTitle))
        {
            tasksBusiness.AddTask(newTaskTitle, newTaskDescription);
            newTaskTitle = string.Empty;
            newTaskDescription = string.Empty;

            // Hide notification if task is successfully added
            tasksLimitAlert = false;
        }
    }

    private string GetProgressText()
    {
        return completedTasks >= taskGoal
            ? $"Take a bow {userName}, YOU have completed all of today's tasks!🎯"
            : $"{completedTasks} of {taskGoal} tasks completed";
    }

    private double GetProgressPercentage()
    {
        int completedTasks = tasksBusiness.GetCompletedTaskCount();
        return taskGoal > 0 ? (double)completedTasks / taskGoal * 100 : 0;
    }

    private void ShowTaskSection()
    {
        isTaskSectionVisible = !isTaskSectionVisible;
    }

    private void StartEditTask(int id, string title, string description)
    {
        editTaskId = id;
        editTaskTitle = title;
        editTaskDescription = description;
    }

    private void SaveTaskEdit()
    {
        tasksBusiness.EditTask(editTaskId, editTaskTitle, editTaskDescription);
        CancelEdit(); // Clear edit state after saving, resetting Edit mode
    }

    private void CancelEdit()
    {
        editTaskId = -1;
        editTaskTitle = "";
        editTaskDescription = "";
    }

    private void DeleteTask(int id)
    {
        tasksBusiness.DeleteTask(id);
    }

    private void MarkTaskCompleted(int id)
    {
        tasksBusiness.MarkTaskCompleted(id);
    }

    private void OnHoursChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            // Wrap around using ternary operators
            hours = value < 0 ? 23 :
                    value > 23 ? 0 :
                    value;
        }
        else
        {
            hours = 0; // Default to 0 on invalid input
        }
    }

    // Handle minutes change
    private void OnMinsChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            // Wrap around using ternary operators
            minutes = value < 0 ? 59 :
                    value > 59 ? 0 :
                    value;
        }
        else
        {
            minutes = 0; // Default to 0 on invalid input
        }
    }

    // Handle seconds change
    private void OnSecsChange(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            // Wrap around using ternary operators
            seconds = value < 0 ? 59 :
                    value > 59 ? 0 :
                    value;
        }
        else
        {
            hours = 0; // Default to 0 on invalid input
        }
    }

    private void Confirm()
    {
        // Convert time to total seconds directly using the integer values
        totalTime = (hours * 3600) + (minutes * 60) + seconds;

        // Update remainingTime and progress based on totalSeconds
        remainingTime = totalTime;
       // progress = 100;

        // GetProgressGradient();
    }

    // To show the time in the hh:mm:ss format, 
    // Need to convert the remaining time into hours, minutes, and seconds.
    private string FormatDisplayTime(int totalSeconds)
    {
        if (totalSeconds < 60)
        {
            // For durations less than one minute, display only seconds.
            return $"{totalSeconds}";
        }
        else
        {
            int hours = totalSeconds / 3600;
            int minutes = (totalSeconds % 3600) / 60;
            int seconds = totalSeconds % 60;

            return $"{hours:D2}:{minutes:D2}:{seconds:D2}";
        }
    }

    // Start the timer
    private void StartPauseTimer()
    {
        if (isPaused)
        {
            // Pause the timer
            countdownTimer?.Stop();
        }
        else
        {
            // If starting for the first time, calculate the total time
            if (remainingTime == 0)
            {
                totalTime = (hours * 3600) + (minutes * 60) + seconds;
                remainingTime = totalTime;
            }

            // Start or resume the timer
            countdownTimer = new System.Timers.Timer(1000); // 1 second interval
            countdownTimer.Elapsed += (sender, e) =>
            {
                if (remainingTime > 0)
                {
                    remainingTime--;
                    progress = (double)remainingTime / totalTime * 100;
                }
                else
                {
                    countdownTimer.Stop();
                }

                // Ensure the UI is updated
                InvokeAsync(StateHasChanged);
            };
            countdownTimer.Start();
        }

        isPaused = !isPaused; // Toggle the timer state
    }

    // Reset the timer
    private void ResetTimer()
    {
        hours = 0;
        minutes = 0;
        seconds = 0;
        progress = 100;
        remainingTime = 0;
        countdownTimer?.Stop();
        isPaused = false;
        InvokeAsync(StateHasChanged);
    }

	// Get the gradient for the circular progress bar
    private string GetProgressGradient()
    {
        double progressPercentage = totalTime > 0 ? (double)remainingTime / totalTime * 100 : 0;

        // Use blue when running, and orange when paused
        string progressColor = isPaused ? "#4caf50" : "#ffc107"; // Blue when running, orange when paused

        // Ensure the gradient is properly set
        return $"conic-gradient({progressColor} {progressPercentage}%, #e0e0e0 {progressPercentage}% 100%)";
    }

	// Create Task Model
	public class TaskItem
	{
		public int Id { get; set; }
		public string Title { get; set; } = string.Empty; // Initialize to an empty string to avoid nulls
		public string Description { get; set; } = string.Empty; // Initialize to an empty string to avoid nulls
		public bool IsCompleted { get; set; } = false;
		public DateTime? CreatedDate { get; set; } = DateTime.Now;
		public DateTime? CompletedDate { get; set; } 
	}


	public class TasksBusiness
	{
		private List<TaskItem> tasks = new();   
		private int nextId = 1;

		public List<TaskItem> GetTasks() => tasks;

		public void AddTask(string title, string description) => tasks.Add(new TaskItem { Id = nextId++, Title = title, Description = description });

		public void EditTask(int id, string title, string description)
		{
			var task = tasks.FirstOrDefault(t => t.Id == id);
			if (task != null)
			{ 
				task.Title = title;
				task.Description = description;
			}
		}

		public void DeleteTask(int id)
		{
			var task = tasks.FirstOrDefault(t => t.Id == id);
			if (task != null)
			{
				tasks.Remove(task);
			}
		}

		public void MarkTaskCompleted(int id)
		{
			var task = tasks.FirstOrDefault(t => t.Id == id);
			if (task != null)
			{
				task.IsCompleted = !task.IsCompleted;
				task.CompletedDate = task.IsCompleted ? DateTime.Now : null;
			}
		}

		public int GetCompletedTaskCount() => tasks.Count(t => t.IsCompleted);
	}

    private void BackToTop()
    {
        // Scroll to the top of the page
        JS.InvokeVoidAsync("window.scrollTo", new object[] { 0, 0 });
    }
}
