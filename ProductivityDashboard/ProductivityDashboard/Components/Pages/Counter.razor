@page "/counter"
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<h1><strong>Dashboard</strong></h1>
<h3 style="color: grey;">Today, @CurrentDateTime</h3>
<style>
    .circular-progress {
        width: 150px;
        height: 150px;
        border-radius: 50%;
        background: conic-gradient( #4caf50 @progressPercentage%, #e0e0e0 @progressPercentage% 100% );
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        font-weight: bold;
        color: #4caf50;
        position: relative;
        margin: 20px auto;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        transition: background 0.5s ease-in-out; /* Smooth transition */
    }

        .circular-progress::before {
            content: '';
            width: 110px;
            height: 110px;
            background-color: #fff; /* Match this with the page background color */
            border-radius: 50%;
            position: absolute;
            z-index: 1;
        }

    .progress-value {
        z-index: 2;
        text-align: center;
        color: #000;
    }

</style>


<h1>Tasks Completed: @tasksBusiness.GetCompletedTaskCount() of @taskGoal tasks completed</h1>

<div class="circular-progress" role="progressbar" aria-label="Total task progress"
     style="background: @GetProgressGradient();">
    <span class="progress-value">@GetProgressText()</span>
</div>

<div class="set-task-goal mb-3">
    <label for="taskGoal">So, how many tasks do you aim to complete today?</label>
    <input type="number" class="form-control" id="taskGoal" @bind="taskGoal" min="1" />
</div>

@* <p role="status">Current count: @currentCount</p>
 *@
@* <button class="btn btn-primary" @onclick="IncrementCount">Click me</button>
 *@
<div class="task-list">
    <h4>Tasks</h4>
    <ul>
        @foreach (var task in tasksBusiness.GetTasks())
        {
            <li>
                 @if (task.Id == editTaskId)
                {
                    <form class="form-inline">
                        <div class="form-group mr-2">
                            <input type="text" class="form-control" placeholder="Edit Title" @bind="editTaskTitle" name="edit-title" autocomplete="on" />
                        </div>

                        <div class="form-group">
                            <textarea class="form-control" placeholder="Edit Description" @bind="editTaskDescription" name="edit-desc" autocomplete="on" />
                        </div>

                            <button class="btn btn-success" @onclick="SaveTaskEdit">Save</button>
                            <button class="btn btn-danger" @onclick="CancelEdit">Cancel</button>
                    </form>
                }
                else
                {
                    <input type="checkbox" @bind="task.IsCompleted" /> @task.Title
                    @if (task.IsCompleted)
                    {
                        <span>(Completed on @task.CompletedDate?.ToString("MMMM dd yyyy") ?? "N/A")</span>
                    }
                    <button class="btn btn-primary" @onclick="() => StartEditTask(task.Id, task.Title, task.Description)">Edit</button>
                    <button class="btn btn-danger" @onclick="() => DeleteTask(task.Id)">Delete</button>
                }
            </li>
        }
    </ul>
</div>

<div class="add-task">
    <h4>Add New Task</h4>
    <form class="form-inline">
        <div class="form-group mr-2">
            <input type="text" class="form-control mb-2" placeholder="Title*" @bind="newTaskTitle" name="add-task" autocomplete="on" />
        </div>

        <div class="form-group">
            <textarea class="form-control mb-2" placeholder="Description (optional)" @bind="newTaskDescription" name="task-desc" autocomplete="on" />
        </div>
    </form>
    <button class="btn btn-primary" disabled="@IsAddTaskButtonDisabled" @onclick="AddTask">Add Task</button>
</div>



@code {
    private int taskGoal = 1;  // Variable to store the user's goal (default value)
    private string progressText => GetProgressText();
    private double progressPercentage => GetProgressPercentage();
    private string progressGradient => GetProgressGradient();
    private int completedTasks => tasksBusiness.GetCompletedTaskCount(); // Get the completed tasks count

    private string newTaskTitle = string.Empty;
    private string newTaskDescription = string.Empty;
    private bool IsAddTaskButtonDisabled => string.IsNullOrWhiteSpace(newTaskTitle);

    // Edit Task variables
    private int editTaskId = -1; // used to track which task is being eidted
    private string editTaskTitle = string.Empty;
    private string editTaskDescription = string.Empty;

    private TasksBusiness tasksBusiness = new(); // Create a new instance

    private string CurrentDateTime => DateTime.Now.ToString("MMMM dd yyyy, hh:mm:ss tt");

    // protected override void OnInitialized()
    // {
    //     var timer = new System.Timers.Timer(1000); // 1 second interval
    //     timer.Elapsed += UpdateTime;
    //     timer.Start();
    // }

    protected override void OnInitialized()
    {
        var timer = new System.Timers.Timer(1000); // Set the timer to update every 1 second
        timer.Elapsed += UpdateTime; // This will pass both sender and ElapsedEventArgs to the method
        timer.Start();
    }

    private void UpdateTime(object? sender, System.Timers.ElapsedEventArgs e) => InvokeAsync(StateHasChanged);

    // private void IncrementCount()
    // {
    //     currentCount++;
    // }

    private void AddTask()
    {
        if(!string.IsNullOrWhiteSpace(newTaskTitle))
        {
            tasksBusiness.AddTask(newTaskTitle, newTaskDescription);
            newTaskTitle = string.Empty;
            newTaskDescription = string.Empty;
        }
    }

    private string GetProgressText()
    {
        return completedTasks >= taskGoal
            ? "Well done! You have completed all of today's tasks!"
            : $"{completedTasks} of {taskGoal}";
    }

    private double GetProgressPercentage()
    {
        int completedTasks = tasksBusiness.GetCompletedTaskCount();
        return taskGoal > 0 ? (double)completedTasks / taskGoal * 100 : 0;
    }

    // Get the progress percentage and update the gradient background
    private string GetProgressGradient()
    {
        double progressPercentage = taskGoal > 0 ? (double)completedTasks / taskGoal * 100 : 0;
        //StateHasChanged(); // Force re-render to apply the CSS transition
        return $"conic-gradient(#4caf50 0% {progressPercentage}%, #e0e0e0 {progressPercentage}% 100%)";
    }

    private string GetEndOffset()
    {
        double completedPercentage = (completedTasks / (double)taskGoal) * 100.0;
        double radians = completedPercentage * 3.6 * (Math.PI / 180.0); // Convert percentage to radians
        double radius = 75.0; // Half of the progress bar size
        double offset = radius * Math.Sin(radians); // Calculate offset based on radius and angle
        return $"{offset}px"; // Return as CSS-compatible string
    }
    // private string GetProgressGradient()
    // {
    //     int completedTasks = tasksBusiness.GetCompletedTaskCount();
    //     var segments = new List<string>();
    //     double segmentSize = 100.0 / taskGoal; // Size of each segment
    //     double gapSize = segmentSize * 0.15;  // Gaps are 15% of the segment size
    //     double progressSize = segmentSize - gapSize;

    //     for (int i = 0; i < taskGoal; i++)
    //     {
    //         double start = i * segmentSize;
    //         double end = start + progressSize;

    //         if (i < completedTasks)
    //         {
    //             // If task is completed, show the progress color
    //             segments.Add($"#4caf50 {start}% {end}%");
    //         }
    //         else
    //         {
    //             // If task is not completed, show the background color
    //             segments.Add($"transparent {start}% {end}%");
    //         }
    //         // Always add a gap after each segment
    //         segments.Add($"#fff {end}% {end + gapSize}%");
    //     }

    //     return $"conic-gradient({string.Join(", ", segments)})";
    // }

    private void StartEditTask(int id, string title, string description)
    {
        editTaskId = id;
        editTaskTitle = title;
        editTaskDescription = description;
    }

    private void SaveTaskEdit()
    {
        tasksBusiness.EditTask(editTaskId, editTaskTitle, editTaskDescription);
        CancelEdit(); // Clear edit state after saving, resetting Edit mode
    }

    private void CancelEdit()
    {
        editTaskId = -1;
        editTaskTitle = "";
        editTaskDescription = "";
    }

    private void DeleteTask(int id)
    {
        tasksBusiness.DeleteTask(id);
    }

    private void MarkTaskCompleted(int id)
    {
        tasksBusiness.MarkTaskCompleted(id);
    }

    // Create Task Model
    public class TaskItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty; // Initialize to an empty string to avoid nulls
        public string Description { get; set; } = string.Empty; // Initialize to an empty string to avoid nulls
        public bool IsCompleted { get; set; } = false;
        public DateTime? CreatedDate { get; set; } = DateTime.Now;
        public DateTime? CompletedDate { get; set; }
    }


    public class TasksBusiness
    {
        private List<TaskItem> tasks = new();   
        private int nextId = 1;

        public List<TaskItem> GetTasks() => tasks;

        public void AddTask(string title, string description) => tasks.Add(new TaskItem { Id = nextId++, Title = title, Description = description });

        public void EditTask(int id, string title, string description)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            { 
                task.Title = title;
                task.Description = description;
            }
        }

        public void DeleteTask(int id)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            {
                tasks.Remove(task);
            }
        }

        public void MarkTaskCompleted(int id)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            {
                task.IsCompleted = true;
                task.CompletedDate = DateTime.Now;
            }
        }

        public int GetCompletedTaskCount() => tasks.Count(t => t.IsCompleted);

    }
}
