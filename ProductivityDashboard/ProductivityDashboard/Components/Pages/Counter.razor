@page "/counter"
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<style>
    .welcome-to-dashboard {
        background-color: #282c34;
        color: white;
        /* padding: 40px; */
        margin-bottom: 20px;
        text-align: center;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 100vh; /* Center content vertically and horizontally */
        text-align: center; /* Center the text */
    }

    .name-input {
        margin-top: 10px;
        margin-bottom: 20px;
        width: 300px; /* Adjust width as needed */
        text-align: center; /* Center the text within the input */
    }

    .submit-name-btn {
        display: inline-flex; /* Use inline-flex for better control of button size and position */
        align-items: center;
        justify-content: center;
        transition: transform 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease;
        border-radius: 50%;
        height: 60px;
        width: 60px;
        margin-top: 10px; /* Ensure some spacing from the input */
        text-align: center;
        line-height: 1; /* Vertically center text inside the button */
        border: 2px solid #3a9d23; /* Match border to initial background */
    }

        .submit-name-btn:hover {
            background-color: #3a9d23; /* A more vivid green */
            color: white;
            transform: scale(1.1);
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2);
        }


    .circular-progress-wrapper {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
    }

    .circular-progress {
        width: 220px;
        height: 220px;
        border-radius: 50%;
        background: conic-gradient( #4caf50 @progressPercentage%, #e0e0e0 @progressPercentage% 100% );
        display: flex;
        align-items: center;
        justify-content: center;
        position: relative;
        margin: 20px auto;
        box-shadow: 0 4px 15px rgba(0, 0, 0, 0.3); /* Slight offset, darker shadow */
        transition: background 3s ease-in-out;
    }

        .circular-progress::before {
            content: '';
            width: 140px;
            height: 140px;
            background-color: #fff; /* Match this with the page background color */
            border-radius: 50%;
            position: absolute;
            z-index: 1;
        }

    .progress-percent {
        z-index: 2;
        font-family: Tahoma;
        font-size: 20px;
        font-weight: bold;
        color: #000;
    }

    .progress-text {
        margin-top: 10px;
        margin-bottom: 10px;
        font-size: 20px;
        font-weight: bold;
        color: #4caf50;
    }

    .add-view-tasks-btn{
        transition: transform 0.3s ease, background-color 0.3s ease, box-shadow 0.3s ease; /* Smooth transition for the effects */
        border-radius: 5px;
        margin-bottom: 15px;
    }
    
        .add-view-tasks-btn:hover {
            background-color: #0056b3; /* Darker blue on hover */
            transform: scale(1.1); /* Slightly increase the size */
            box-shadow: 0px 4px 15px rgba(0, 0, 0, 0.2); /* Add a shadow effect */
        }
</style>
@if(!hasEnteredName && !isLoading)
{
    <div class="welcome-to-dashboard">
        <h1 style=" font-family: 'Lucida Handwriting'">Welcome to My Productivity Dashboard!</h1>
@*         <h5>Please enter your name to proceed to your productivity dashboard :)</h5>
 *@        <input type="text" class="form-control name-input" @bind="userName" placeholder="Enter your name here..." name="user-name" autocomplete="on" />
            <button class="btn btn-success submit-name-btn" @onclick="async () => await SubmitName()"><strong>Go!</strong></button>

        <!-- After the Go button -->
        @if (isLoading)
        {
            <p style="text-align: center; color: grey;">Loading...</p>
        }

            <div class="notification" style="color:red; margin-top: 15px; display:@(nameAlert ? "block" : "none");">
                    <strong>Note:</strong> Please enter your name to proceed!
            </div>
    </div>
}

else{
    <!-- Time at the top, smaller and aligned to the right -->
    <div style="text-align: right; color: grey; font-size: 16px;">
        Today, @CurrentDateTime
        @if (result.HasValue)
        {
            <p class="mt-3" style="font-size: 40px; font-family: Verdana">@result.Value @resultUnit</p>
        }
    </div>

    <!-- Main heading -->
    <h1 style=" font-size: 36px; margin-bottom: 5px;"><strong>My Productivity Dashboard</strong></h1>
    <hr style="border: 1px solid #ccc; margin-bottom: 20px;">

    <!-- Greeting with the user's name -->
    <h2 style="font-size: 24px; margin-bottom: 30px;">Good morning, @userName! What's the plan today?</h2>

    <div class="container mt-4">
        <div class="form-group row">
            <div class="col-md-2">
                <input type="number" class="form-control form-control-sm" id="tempInput" @bind="temperature" placeholder="Temperature" />
            </div>

            <div class="col-md-3">
                <select class="form-control form-control-sm" id="conversionType" @onchange="ConvertTemperature">
                    <option value="CtoF">Celsius to Fahrenheit</option>
                    <option value="FtoC">Fahrenheit to Celsius</option>
                </select>
            </div>
        </div>

        @if (result.HasValue)
        {
            <p>The converted temperature is @result.Value @resultUnit</p>
        }

        @* <button class="btn btn-primary mt-3" @onclick="ConvertTemperature">Convert</button> *@
    </div>

    <!-- Task progress section -->
    <div class="circular-progress-wrapper">
        <!-- Sub-heading for task progress, slightly smaller than the greeting -->
        <h3 style="font-size: 22px; margin-bottom: 5px;"><strong>My Task Progress</strong></h3>

        <div class="circular-progress" role="progressbar" 
        aria-label="Total task progress" 
        aria-valuemin="0" 
        aria-valuemax="100"
             title="@GetProgressText()">

            <span class="progress-percent">@GetProgressPercentage().ToString("0")%</span>
        </div>
        <span class="progress-text">@GetProgressText()</span>

        @* Button to reveal tasks section *@
        <button class="btn btn-primary add-view-tasks-btn" type="button" @onclick="ShowTaskSection"><strong>Add & View My Tasks</strong></button>
    </div>

    @if (isTaskSectionVisible)
    {
        <div class="tasks-section">
            <div class="set-task-goal mb-3">
                <label for="taskGoal"><strong>So, how many tasks do you aim to complete today?</strong></label>
                <input type="number" class="form-control" id="taskGoal" @bind="taskGoal" min="1" />
            </div>

            <div class="task-list">
                <ul>
                    @foreach (var task in tasksBusiness.GetTasks())
                    {
                        <li>
                             @if (task.Id == editTaskId)
                            {
                                <form class="form-inline">
                                    <div class="form-group mr-2">
                                        <input type="text" class="form-control" placeholder="Edit Title" @bind="editTaskTitle" name="edit-title" autocomplete="on" />
                                    </div>

                                    <div class="form-group">
                                        <textarea class="form-control" placeholder="Edit Description" @bind="editTaskDescription" name="edit-desc" autocomplete="on" />
                                    </div>

                                    <button type="button" class="btn btn-success" @onclick="SaveTaskEdit">Save</button>
                                    <button type="button" class="btn btn-danger" @onclick="CancelEdit">Cancel</button>
                                </form>
                            }
                            else
                            {
                                <input type="checkbox" @onchange="() => MarkTaskCompleted(task.Id)" /> @task.Title
                                @if (task.IsCompleted && task.CompletedDate != null)
                                {
                                    <span>(Completed on @task.CompletedDate?.ToString("MMMM dd yyyy hh:mm:ss"))</span>
                                }
                                <div>
                                <button type="button" class="btn btn-primary" @onclick="() => StartEditTask(task.Id, task.Title, task.Description)">Edit</button>
                                <button type="button" class="btn btn-danger" @onclick="() => DeleteTask(task.Id)">Delete</button>
                                </div>
                            }
                        </li>
                    }
                </ul>
            </div>

            <div class="add-task">
                <h4>Add New Task</h4>
                <form class="form-inline">
                    <div class="form-group mr-2">
                        <input type="text" class="form-control mb-2" placeholder="Title*" @bind="newTaskTitle" name="add-task" autocomplete="on" />
                    </div>

                    <div class="form-group">
                        <textarea class="form-control mb-2" placeholder="Description (optional)" @bind="newTaskDescription" name="task-desc" autocomplete="on" />
                    </div>
                </form>

                <div class="notification" style="color:red; margin-bottom: 15px; display:@(tasksLimitAlert ? "block" : "none");">
                    <strong>Note:</strong> YO! You have reached your task goal! Increase your no.tasks goals if you wish to add more tasks.
                </div>

                <button class="btn btn-primary" disabled="@IsAddTaskButtonDisabled" @onclick="AddTask">Add Task</button>
            </div>
        </div>
    }
}
@code {
    private bool hasEnteredName = false; // Set to track if the user has entered in their name
    private string userName = "";
    private bool nameAlert = false;
    private bool isLoading = false;

    private bool isTaskSectionVisible = false; // State to control the visibility of the task section
    private double temperature;
    private double? result;
    private string conversionType = "CtoF"; // Default selection
    private string? resultUnit; 
    private string CurrentDateTime => DateTime.Now.ToString("MMMM dd yyyy, hh:mm:ss tt");

    private int taskGoal = 1;  // Variable to store the user's goal (default value)
    private string progressText => GetProgressText();
    private double progressPercentage => GetProgressPercentage();
    //  private string progressGradient => GetProgressGradient();
    private int completedTasks => tasksBusiness.GetCompletedTaskCount(); // Get the completed tasks count

    private string newTaskTitle = string.Empty;
    private string newTaskDescription = string.Empty;
    private bool IsAddTaskButtonDisabled => string.IsNullOrWhiteSpace(newTaskTitle);
    private bool tasksLimitAlert = false;

    // Edit Task variables
    private int editTaskId = -1; // used to track which task is being eidted
    private string editTaskTitle = string.Empty;
    private string editTaskDescription = string.Empty;

    private TasksBusiness tasksBusiness = new(); // Create a new instance

    private async Task SubmitName()
    {
        if (!string.IsNullOrWhiteSpace(userName))
        {
            isLoading = true; // Show text
            StateHasChanged();

            // Simulate a delay
            await Task.Delay(1500);

            hasEnteredName = true; // Set to true to reveal the dashboard
            isLoading = false;
            nameAlert = true; // Show the alert if the name is empty
        }
        else
        {
            nameAlert = true; // Show alert if name is not entered
        }
    }

    protected override void OnInitialized()
    {
        var timer = new System.Timers.Timer(1000); // Set the timer to update every 1 second
        timer.Elapsed += UpdateTime; // This will pass both sender and ElapsedEventArgs to the method
        timer.Start();
    }

    private void UpdateTime(object? sender, System.Timers.ElapsedEventArgs e) => InvokeAsync(StateHasChanged);

    private void ConvertTemperature(ChangeEventArgs e)
    {
        // Update the selected conversion type
        conversionType = e.Value?.ToString() ?? string.Empty;

        if (conversionType == "CtoF")
        {
            result = Math.Round((temperature * 9 / 5) + 32, 2); // Round to 2 decimal places   
            resultUnit = "°F";
        }
        else if (conversionType == "FtoC")
        {
            result = Math.Round((temperature - 32) * 5 / 9, 2); // Round to 2 decimal places            
            resultUnit = "°C";
        }
    }

    private void AddTask()
    {
        if (tasksBusiness.GetTasks().Count >= taskGoal)
        {
            // Show notification when trying to add more tasks than the goal
            tasksLimitAlert = true;
        }
        else if (!string.IsNullOrWhiteSpace(newTaskTitle))
        {
            tasksBusiness.AddTask(newTaskTitle, newTaskDescription);
            newTaskTitle = string.Empty;
            newTaskDescription = string.Empty;

            // Hide notification if task is successfully added
            tasksLimitAlert = false;
        }
    }


    private string GetProgressText()
    {
        return completedTasks >= taskGoal
            ? "Well done! \n You have completed all of today's tasks!"
            : $"{completedTasks} of {taskGoal} tasks completed";
    }

    private double GetProgressPercentage()
    {
        int completedTasks = tasksBusiness.GetCompletedTaskCount();
        return taskGoal > 0 ? (double)completedTasks / taskGoal * 100 : 0;
    }

    // Get the progress percentage and update the gradient background
    // private string GetProgressGradient()
    // {
    //     double progressPercentage = taskGoal > 0 ? (double)completedTasks / taskGoal * 100 : 0;
    //     //StateHasChanged(); // Force re-render to apply the CSS transition
    //     return $"conic-gradient(#4caf50 0% {progressPercentage}%, #e0e0e0 {progressPercentage}% 100%)";
    // }

    private string GetEndOffset()
    {
        double completedPercentage = (completedTasks / (double)taskGoal) * 100.0;
        double radians = completedPercentage * 3.6 * (Math.PI / 180.0); // Convert percentage to radians
        double radius = 75.0; // Half of the progress bar size
        double offset = radius * Math.Sin(radians); // Calculate offset based on radius and angle
        return $"{offset}px"; // Return as CSS-compatible string
    }

    private void ShowTaskSection()
    {
        isTaskSectionVisible = !isTaskSectionVisible;
    }

    private void StartEditTask(int id, string title, string description)
    {
        editTaskId = id;
        editTaskTitle = title;
        editTaskDescription = description;
    }

    private void SaveTaskEdit()
    {
        tasksBusiness.EditTask(editTaskId, editTaskTitle, editTaskDescription);
        CancelEdit(); // Clear edit state after saving, resetting Edit mode
    }

    private void CancelEdit()
    {
        editTaskId = -1;
        editTaskTitle = "";
        editTaskDescription = "";
    }

    private void DeleteTask(int id)
    {
        tasksBusiness.DeleteTask(id);
    }

    private void MarkTaskCompleted(int id)
    {
        tasksBusiness.MarkTaskCompleted(id);
    }

    // Create Task Model
    public class TaskItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty; // Initialize to an empty string to avoid nulls
        public string Description { get; set; } = string.Empty; // Initialize to an empty string to avoid nulls
        public bool IsCompleted { get; set; } = false;
        public DateTime? CreatedDate { get; set; } = DateTime.Now;
        public DateTime? CompletedDate { get; set; } 
    }


    public class TasksBusiness
    {
        private List<TaskItem> tasks = new();   
        private int nextId = 1;

        public List<TaskItem> GetTasks() => tasks;

        public void AddTask(string title, string description) => tasks.Add(new TaskItem { Id = nextId++, Title = title, Description = description });

        public void EditTask(int id, string title, string description)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            { 
                task.Title = title;
                task.Description = description;
            }
        }

        public void DeleteTask(int id)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            {
                tasks.Remove(task);
            }
        }

        public void MarkTaskCompleted(int id)
        {
            var task = tasks.FirstOrDefault(t => t.Id == id);
            if (task != null)
            {
                task.IsCompleted = !task.IsCompleted;
                task.CompletedDate = task.IsCompleted ? DateTime.Now : null;
            }
        }

        public int GetCompletedTaskCount() => tasks.Count(t => t.IsCompleted);

    }
}
